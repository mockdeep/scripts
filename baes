#!/usr/bin/env ruby

require 'English'
require 'open3'

SKIP_BRANCHES = %w[staging master]

class Branch

  attr_accessor :name
  attr_accessor :children

  def initialize(name)
    @name = name
    @children = []
  end

  def rebase(other_branch)
    print `git checkout #{name}`
    stdout, stderr, status = Open3.capture3("git rebase #{other_branch.name}")
    puts stdout
    puts stderr unless stderr.empty?
    skip_through(other_branch) unless status.success?
  end

  def skip_through(other_branch)
    puts "conflict rebasing branch #{name} on #{other_branch.name}"
    print "skip commit #{next_step} of #{last_step}? (y/n)"
    answer = gets.chomp
    if answer == 'y'
      print `git rebase --skip`
      skip_through(other_branch) if !$CHILD_STATUS.success?
    else
      abort 'failed to rebase'
    end
  end

  def next_step
    File.read('./.git/rebase-apply/next').strip
  end

  def last_step
    File.read('./.git/rebase-apply/last').strip
  end

  def inspect(indentation = '')
    children_strings = children.map do |child|
      "\n#{child.inspect(indentation + '  ')}"
    end
    "#{indentation}#{name}#{children_strings.join}"
  end

end

class TreeBuilder
  def initialize
    @branch_cache = {}
  end

  def call(branches, root_name:)
    branches.each do |branch|
      link_branch_to_parent(branch, branches, root_name: root_name)
    end
    find_branch(branches, root_name)
  end

  def link_branch_to_parent(branch, branches, root_name:)
    return if (SKIP_BRANCHES + [root_name]).include?(branch.name)

    root_branch = find_branch(branches, root_name)
    parent_branch =
      find_branch(branches, parent_name(branch, root_name: root_name)) ||
      root_branch

    parent_branch.children << branch
  end

  def parent_name(branch, root_name:)
    _, name, number = branch.name.match(/(\A[a-zA-Z_-]+)(\d+)/).to_a

    number ? "#{name}#{(number.to_i - 1).to_s.rjust(number.length, '0')}" : root_name
  end

  def find_branch(branches, name)
    @branch_cache[name] ||= branches.detect do |branch|
      branch.name.end_with?(name)
    end
  end

end

class Rebaser
  def call
    root_name = ARGV.detect { |arg| arg != '--dry' } || 'master'
    root_branch = TreeBuilder.new.(branches, root_name: root_name)

    if ARGV.any? { |arg| arg == '--dry' }
      puts root_branch.inspect
    else
      rebase_children(root_branch)
    end
    print `git checkout #{root_name}`
  end

  def branches
    `git branch`.lines.map { |line| Branch.new(line.strip.tr('* ', '')) }
  end

  def rebase_children(branch)
    branch.children.each do |child_branch|
      child_branch.rebase(branch)
      rebase_children(child_branch)
    end
  end
end

Rebaser.new.()
