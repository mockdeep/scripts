#!/usr/bin/env ruby

class Branch

  attr_accessor :name, :current

  def initialize(name, current)
    @name = name
    @current = current
  end

  def next(all_branches)
    all_b
  end

end

class Chainer

  class << self
    def call(branch = current_branch)
      next_branch = find_branch(branch.name.next, all_branches)
      return unless next_branch
      puts " #{next_branch.name} ".center(100, '*')
      puts
      print `git log #{branch.name}..#{next_branch.name}`
      puts
      call(next_branch)
    end

    def current_branch
      all_branches.detect(&:current)
    end

    def all_branches
      `git branch`.lines.map do |branch_line|
        current = branch_line.start_with?('*')
        branch_name = branch_line.tr('*', '').strip
        Branch.new(branch_name, current)
      end
    end

    def find_branch(branch_name, branches)
      branches.detect { |branch| branch.name == branch_name }
    end
  end

end

Chainer.()
