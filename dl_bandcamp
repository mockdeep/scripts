#!/usr/bin/env ruby

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'

  gem 'capybara'
  gem 'pry'
end

require 'open-uri'
require 'capybara'
require 'pry'

module BandcampDL
  class Album
    DOWNLOADED_URLS_FILE = 'downloaded_urls'
    attr_reader :artist, :url

    def initialize(artist, url)
      @artist = artist
      @url = url
    end

    def page
      @page ||= Capybara.string(URI.open(url).read)
    end

    def download
      puts "*" * 100
      if already_downloaded?
        puts "already downloaded, skipping: #{title}"
        return
      end

      download_files
      download_art
      set_track_info
      mark_downloaded
      puts "finished downloading #{title}"
      puts "*" * 100
    end

    def already_downloaded?
      File.exist?(DOWNLOADED_URLS_FILE) && File.read(DOWNLOADED_URLS_FILE).include?(url)
    end

    def mark_downloaded
      File.open(DOWNLOADED_URLS_FILE, 'a') do |file|
        file.puts(url)
      end
    end

    def download_files
      command = [
        "yt-dlp",
        "-o", "#{store_path}/%(autonumber)03d %(title)s.%(ext)s",
        url,
        "-f", "mp3",
      ]
      p command
      result = system(*command, out: STDOUT)
      warn "failed to download" unless result
    end

    def download_art
      art_url = page.find('#tralbumArt').find('a.popupImage')['href']
      File.write("#{store_path}/cover.jpg", URI.open(art_url).read)
    end

    def set_track_info
      # https://robinst.github.io/taglib-ruby/
      # https://github.com/robinst/taglib-ruby/issues/101
      # https://www.go4expert.com/articles/read-update-mp3-id3-tags-ruby-t29652/
      # Bonus: set album art on songs
      # Bonus: set artist on songs
      # Bonus: set track number on songs
      # Bonus: set track year on songs
      # Bonus: clear play count
    end

    def store_path
      "#{artist.name}/#{year} - #{title}"
    end

    def year
      page
        .find('.tralbum-credits')
        .text
        .split("\n")
        .grep(/^\s*released/)
        .first[-4..-1]
    end

    def title
      page.find('#name-section').find('.trackTitle').text.strip
    end
  end

  class MainPage
    attr_reader :page, :root_url

    def initialize(page, root_url)
      @page = page
      @root_url = root_url
    end

    def album_urls
      if page.has_selector?('#discography')
        page.find('#discography').all('.trackTitle').map do |title|
          path = title.find('a')['href']

          path.start_with?("http") ? path : "#{root_url}#{path}"
        end
      else
        page.find('#music-grid').all('.music-grid-item').map do |grid_item|
          path = grid_item.find('a')['href']

          "#{root_url}#{path}"
        end
      end
    end
  end

  class MusicPage
    attr_reader :page, :root_url

    def initialize(page, root_url)
      @page = page
      @root_url = root_url
    end

    def album_urls
      page.find("#music-grid").all('.music-grid-item').map do |grid_item|
        path = grid_item.find('a')['href']

        "#{root_url}#{path}"
      end
    end
  end

  class Artist
    attr_reader :root_url

    def initialize(root_url)
      @root_url = root_url
    end

    def page
      @page ||= Capybara.string(URI.open(root_url).read)
    end

    def discography
      @discography ||=
        begin
          if page.has_selector?('.showMore')
            p "music page"
            music_path = page.find('.showMore').find('a')['href']
            p music_path
            music_url = "#{root_url}#{music_path}"
            music_page = Capybara.string(URI.open(music_url).read)

            MusicPage.new(music_page, root_url)
          else
            p "main page"
            MainPage.new(page, root_url)
          end
        end
    end

    def albums
      discography.album_urls.map { |album_url| Album.new(self, album_url) }
    end

    def name
      page.title
    end
  end

  class Runner
    def call(root_url)
      Artist.new(root_url).albums.each(&:download)
    end
  end
end

BandcampDL::Runner.new.call(ARGV.first)
