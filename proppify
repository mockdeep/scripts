#!/usr/bin/env ruby

class Binding
  def pry
    irb
  end
end

class ThingDoer
  def self.call
    new.call
  end

  def call
    file_path = `git grep -l propTypes`.lines.last.strip
    code = File.read(file_path).lines
    add_props_frame(code)
    File.write(file_path, code.join)
    add_specific_props(code, file_path)
    strip_prop_types(code)
    File.write(file_path, code.join)
    puts `yarn ts_check`
  end

  def add_props_frame(code)
    class_line = code.grep(/^class/).first
    if class_line
      class_line_no = code.index(class_line)

      code[class_line_no] = class_line.sub('<any', '<Props')
      code.insert(class_line_no, "type Props = {\n", "}\n", "\n")
    else
      function_line = code.grep(/^function [A-Z]/).first
      function_line_no = code.index(function_line)

      code[function_line_no] = function_line.sub('(props)', '(props: Props)')
      code.insert(function_line_no, "type Props = {\n", "}\n", "\n")
    end
  end

  def add_specific_props(code, file_path)
    typescript_lines = `yarn ts_check 2>&1`.lines.grep(/^#{file_path}/)
    names = typescript_lines.map do |line|
      p line
      line.match(/Property '(.*)' does not exist/)[1]
    end.uniq.sort

    insert_index = code.index("type Props = {\n") + 1
    names.reverse.each do |name|
      type =
        if name.end_with?("s")
          "#{name.capitalize.chomp("s")}[]"
        else
          name.capitalize
        end

      code.insert(insert_index, "  #{name}: #{type};\n")
    end
  end

  def strip_prop_types(code)
    code.delete("import PropTypes from 'prop-types';\n")
    prop_type_status = :not_encountered

    code.keep_if do |line|
      prop_type_status = :done if prop_type_status == :final_newline
      prop_type_status = :final_newline if prop_type_status == :ending && line == "\n"
      prop_type_status = :ending if prop_type_status == :inside && line == "};\n"
      prop_type_status = :inside if line.include?('propTypes')

      prop_type_status == :not_encountered || prop_type_status == :done
    end
  end
end

ThingDoer.call
